/**
 * @fileoverview M√≥dulo de cach√© optimizado con sistema unificado.
 * Elimina redundancias y mejora el rendimiento.
 */

// ==================== CONFIGURACI√ìN DEL M√ìDULO ====================

const CACHE_KEY = 'DASHBOARD_CONSOLIDATED_V1';

// üö® FALLBACK: Sistema de cach√© alternativo usando PropertiesService
const FALLBACK_CACHE = {
  enabled: false,
  
  // Verificar si CacheService funciona - CORREGIDO
  checkCacheService() {
    try {
      const cache = CacheService.getScriptCache();
      const testKey = 'TEST_CACHE_CHECK_' + Date.now();
      const testValue = 'test_' + Date.now();
      
      // Write-Read-Delete pattern (no depende del return value)
      cache.put(testKey, testValue, 60);
      const retrieved = cache.get(testKey);
      
      if (retrieved !== testValue) {
        console.warn('[Cache] ‚ö†Ô∏è CacheService no funcional: read mismatch');
        return false;
      }
      
      // Cleanup
      cache.remove(testKey);
      
      console.log('[Cache] ‚úÖ CacheService funcional detectado');
      return true;
    } catch (error) {
      console.warn('[Cache] ‚ö†Ô∏è CacheService no funcional:', error);
      return false;
    }
  },
  
  // Inicializar fallback si es necesario
  init() {
    if (!this.checkCacheService()) {
      console.warn('[Cache] ‚ö†Ô∏è CacheService no funcional, activando fallback con PropertiesService');
      this.enabled = true;
    }
  },
  
  // Guardar datos usando PropertiesService - MEJORADO
  put(key, value, ttl) {
    if (!this.enabled) return false;
    
    try {
      // Validar tama√±o antes de intentar guardar
      const data = {
        value: value,
        expires: Date.now() + (ttl * 1000)
      };
      const jsonData = JSON.stringify(data);
      
      if (jsonData.length > 9000) {
        console.error(`[Cache] ‚ùå Fallback: Valor muy grande (${jsonData.length} bytes) para PropertiesService`);
        console.error(`[Cache] üí° L√≠mite: 9000 bytes, Clave: ${key}`);
        return false;
      }
      
      PropertiesService.getScriptProperties().setProperty(key, jsonData);
      console.log(`[Cache] ‚úÖ Fallback guardado: ${key} (${jsonData.length} bytes)`);
      return true;
    } catch (error) {
      console.error('[Cache] ‚ùå Error en fallback put:', error);
      console.error(`[Cache] üîç Clave: ${key}, Tama√±o: ${value ? value.length : 'N/A'}`);
      return false;
    }
  },
  
  // Recuperar datos usando PropertiesService
  get(key) {
    if (!this.enabled) return null;
    
    try {
      const dataStr = PropertiesService.getScriptProperties().getProperty(key);
      if (!dataStr) return null;
      
      const data = JSON.parse(dataStr);
      
      // Verificar expiraci√≥n
      if (Date.now() > data.expires) {
        this.remove(key);
        return null;
      }
      
      return data.value;
    } catch (error) {
      console.error('[Cache] Error en fallback get:', error);
      return null;
    }
  },
  
  // Eliminar datos usando PropertiesService
  remove(key) {
    if (!this.enabled) return false;
    
    try {
      PropertiesService.getScriptProperties().deleteProperty(key);
      return true;
    } catch (error) {
      console.error('[Cache] Error en fallback remove:', error);
      return false;
    }
  }
};

// ==================== FUNCIONES DE CACH√â ====================

/**
 * ‚úÖ CORRECCI√ìN CR√çTICA: setCacheData con metadata consistente
 * PROBLEMA ORIGINAL: Metadata no inclu√≠a 'fragments' para datos fragmentados
 * SOLUCI√ìN: Metadata siempre incluye 'fragments' en todos los casos
 * 
 * @param {Object} data - Datos a guardar en cach√©
 * @param {number} ttl - Tiempo de vida en segundos (default: 1800)
 * @returns {boolean} True si se guard√≥ exitosamente
 */
function setCacheData(data, ttl = 1800) {
  try {
    // ‚úÖ SOLUCI√ìN SIMPLE: Siempre usar el sistema corregido con metadata consistente
    // Eliminamos la dependencia de setUnifiedCache para garantizar sincronizaci√≥n
    
    // Inicializar fallback si es necesario
    FALLBACK_CACHE.init();
    
    // üö® FALLBACK: Si CacheService no funciona, usar PropertiesService
    let cache;
    let useFallback = false;
    
    try {
      cache = CacheService.getScriptCache();
      // Verificar si realmente funciona usando la funci√≥n corregida
      if (!FALLBACK_CACHE.checkCacheService()) {
        console.warn('[Cache] ‚ö†Ô∏è CacheService no funcional, usando fallback');
        useFallback = true;
      }
    } catch (cacheError) {
      console.warn('[Cache] ‚ö†Ô∏è CacheService no disponible, usando fallback:', cacheError);
      useFallback = true;
    }
    const jsonString = JSON.stringify(data);
    const sizeBytes = jsonString.length;
    const sizeKB = Math.round(sizeBytes / 1024);
    
    console.log(`[Cache] üíæ Guardando datos: ${sizeKB}KB`);
    
    // Decisi√≥n: Fragmentar si supera 50KB (m√°s conservador que 95KB)
    const FRAGMENT_THRESHOLD = 50000; // 50KB en bytes
    
    // üîß CORRECCI√ìN: Tama√±o de fragmento compatible con PropertiesService
    const FRAGMENT_SIZE = useFallback ? 8000 : 50000; // 8KB para fallback, 50KB para CacheService
    const MAX_FALLBACK_SIZE = 72000; // 9 fragmentos √ó 8KB = 72KB m√°ximo para fallback
    
    if (sizeBytes > FRAGMENT_THRESHOLD) {
      console.log('[Cache] üì¶ Fragmentando datos grandes...');
      
      // üö® VALIDACI√ìN: Rechazar datos muy grandes en fallback
      if (useFallback && sizeBytes > MAX_FALLBACK_SIZE) {
        console.warn(`[Cache] ‚ö†Ô∏è Datos muy grandes (${sizeKB}KB) para fallback, rechazando`);
        console.warn(`[Cache] üí° L√≠mite fallback: ${Math.round(MAX_FALLBACK_SIZE/1024)}KB`);
        return false; // Forzar rec√°lculo en lugar de llenar PropertiesService
      }
      const fragments = [];
      
      // Dividir en fragmentos del tama√±o apropiado
      for (let i = 0; i < jsonString.length; i += FRAGMENT_SIZE) {
        fragments.push(jsonString.slice(i, i + FRAGMENT_SIZE));
      }
      
      console.log(`[Cache] üìä Fragmentos: ${fragments.length}, Tama√±o: ${FRAGMENT_SIZE} bytes cada uno`);
      console.log(`[Cache] üéØ Backend: ${useFallback ? 'PropertiesService' : 'CacheService'}`);
      
      // Guardar cada fragmento con √≠ndice
      for (let i = 0; i < fragments.length; i++) {
        const fragmentKey = `${CACHE_KEY}_${i}`;
        const fragmentSize = fragments[i].length;
        console.log(`[Cache] üîç DEBUG Fragmento ${i}: Clave="${fragmentKey}", Tama√±o=${fragmentSize} bytes`);
        
        let success;
        if (useFallback) {
          success = FALLBACK_CACHE.put(fragmentKey, fragments[i], ttl);
        } else {
          success = cache.put(fragmentKey, fragments[i], ttl);
        }
        
        if (!success) {
          console.error(`[Cache] ‚ùå Error guardando fragmento ${i}`);
          console.error(`[Cache] üîç DEBUG: Clave="${fragmentKey}", Tama√±o=${fragmentSize} bytes, TTL=${ttl}`);
          console.error('[Cache] üîç Posibles causas: fragmento muy grande, clave inv√°lida, TTL inv√°lido');
          // Limpiar fragmentos parciales
          clearCache();
          return false;
        }
      }
      
      // ‚úÖ CORRECCI√ìN: Guardar metadata con estructura correcta
      const metadata = {
        fragments: fragments.length,    // ‚úÖ CAMPO REQUERIDO
        size: sizeBytes,                 // En bytes (no KB)
        timestamp: Date.now(),           // Timestamp para tracking
        originalKey: CACHE_KEY,          // Referencia
        fragmentSize: FRAGMENT_SIZE      // Info adicional √∫til
      };
      
      // Guardar metadata
      if (useFallback) {
        FALLBACK_CACHE.put('DASHBOARD_DATA_META', JSON.stringify(metadata), ttl);
      } else {
        cache.put('DASHBOARD_DATA_META', JSON.stringify(metadata), ttl);
      }
      console.log(`[Cache] ‚úÖ Fragmentado exitoso: ${fragments.length} fragmentos (${sizeKB}KB total)`);
      
      return true;
      
    } else {
      // Datos peque√±os: guardar directamente SIN fragmentaci√≥n
      console.log('[Cache] üíæ Guardando datos sin fragmentar...');
      console.log(`[Cache] üîç DEBUG: Clave=${CACHE_KEY}, TTL=${ttl}, Tama√±o=${sizeBytes} bytes`);
      
      let success;
      if (useFallback) {
        success = FALLBACK_CACHE.put(CACHE_KEY, jsonString, ttl);
      } else {
        success = cache.put(CACHE_KEY, jsonString, ttl);
      }
      
      if (!success) {
        console.error('[Cache] ‚ùå Error guardando datos simples');
        console.error(`[Cache] üîç DEBUG: Clave="${CACHE_KEY}", TTL=${ttl}, Tama√±o=${sizeBytes} bytes`);
        console.error('[Cache] üîç Posibles causas: datos muy grandes, clave inv√°lida, TTL inv√°lido');
        return false;
      }
      
      // ‚úÖ CORRECCI√ìN: Metadata consistente incluso para datos simples
      const metadata = {
        fragments: 1,            // ‚úÖ 1 = datos simples (no fragmentados)
        size: sizeBytes,
        timestamp: Date.now(),
        originalKey: CACHE_KEY,
        fragmentSize: 0          // 0 = no hay fragmentaci√≥n
      };
      
      // Guardar metadata
      if (useFallback) {
        FALLBACK_CACHE.put('DASHBOARD_DATA_META', JSON.stringify(metadata), ttl);
      } else {
        cache.put('DASHBOARD_DATA_META', JSON.stringify(metadata), ttl);
      }
      console.log(`[Cache] ‚úÖ Guardado directo exitoso (${sizeKB}KB)`);
      
      return true;
    }
    
  } catch (error) {
    console.error('[Cache] ‚ùå Error cr√≠tico guardando:', error);
    clearCache(); // Limpiar cualquier dato parcial
    return false;
  }
}

/**
 * Recupera los datos de la cach√© con reconstrucci√≥n optimizada de fragmentos.
 * @returns {Object|null} Datos recuperados o null si no hay cach√©
 */
function getCacheData() {
  try {
    // Inicializar fallback si es necesario
    FALLBACK_CACHE.init();
    
    // üö® FALLBACK: Si CacheService no funciona, usar PropertiesService
    let cache;
    let useFallback = false;
    
    try {
      cache = CacheService.getScriptCache();
      // Verificar si realmente funciona usando la funci√≥n corregida
      if (!FALLBACK_CACHE.checkCacheService()) {
        console.warn('[Cache] ‚ö†Ô∏è CacheService no funcional, usando fallback');
        useFallback = true;
      }
    } catch (cacheError) {
      console.warn('[Cache] ‚ö†Ô∏è CacheService no disponible, usando fallback:', cacheError);
      useFallback = true;
    }
    
    // PASO 1: Buscar metadata para determinar tipo de cach√©
    console.log('[CacheModule] Verificando metadata de cach√©...');
    let metadataStr;
    if (useFallback) {
      metadataStr = FALLBACK_CACHE.get('DASHBOARD_DATA_META');
    } else {
      metadataStr = cache.get('DASHBOARD_DATA_META');
    }
    
    if (metadataStr) {
      console.log('[CacheModule] Metadata encontrada, procesando fragmentos...');
      
      try {
        const metadata = JSON.parse(metadataStr);
        console.log(`[CacheModule] Metadata v√°lida: ${metadata.fragments} fragmentos, ${metadata.size} bytes`);
        
        // Validar metadata
        if (!metadata.fragments || metadata.fragments < 1) {
          console.error('[CacheModule] Metadata inv√°lida: fragments debe ser >= 1');
          clearCache();
          return null;
        }
        
        // PASO 2: Manejar caso especial de fragments=1 (cach√© simple con metadata)
        if (metadata.fragments === 1) {
          console.log('[CacheModule] fragments=1, leyendo cach√© simple directamente');
          let cached;
          if (useFallback) {
            cached = FALLBACK_CACHE.get(CACHE_KEY);
          } else {
            cached = cache.get(CACHE_KEY);
          }
          
          if (!cached) {
            console.error('[CacheModule] Fragmento √∫nico no encontrado en cach√© simple');
            clearCache();
            return null;
          }
          
          const data = JSON.parse(cached);
          console.log('[CacheModule] ‚úÖ Datos √∫nicos recuperados exitosamente');
          return data;
        }
        
        // PASO 3: Reconstruir m√∫ltiples fragmentos
        console.log(`[CacheModule] Reconstruyendo ${metadata.fragments} fragmentos...`);
        let reconstructedData = '';
        let fragmentsFound = 0;
        
        for (let i = 0; i < metadata.fragments; i++) {
          const fragmentKey = `${CACHE_KEY}_${i}`;
          let fragment;
          if (useFallback) {
            fragment = FALLBACK_CACHE.get(fragmentKey);
          } else {
            fragment = cache.get(fragmentKey);
          }
          
          if (!fragment) {
            console.error(`[CacheModule] ‚ùå Fragmento ${i} faltante (${fragmentKey})`);
            console.log('[CacheModule] Cach√© corrupto detectado, limpiando...');
            clearCache();
            return null;
          }
          
          reconstructedData += fragment;
          fragmentsFound++;
          console.log(`[CacheModule] Fragmento ${i + 1}/${metadata.fragments} OK: ${fragment.length} bytes`);
        }
        
        // Validar que se encontraron todos los fragmentos
        if (fragmentsFound !== metadata.fragments) {
          console.error(`[CacheModule] ‚ùå Fragmentos incompletos: ${fragmentsFound}/${metadata.fragments}`);
          clearCache();
          return null;
        }
        
        // Validar tama√±o reconstruido
        if (reconstructedData.length !== metadata.size) {
          console.warn(`[CacheModule] ‚ö†Ô∏è Tama√±o reconstruido (${reconstructedData.length}) != metadata (${metadata.size})`);
        }
        
        // Parsear JSON final
        const data = JSON.parse(reconstructedData);
        console.log(`[CacheModule] ‚úÖ Datos fragmentados reconstruidos: ${fragmentsFound} fragmentos, ${reconstructedData.length} bytes`);
        return data;
        
      } catch (metadataError) {
        console.error('[CacheModule] ‚ùå Error procesando metadata:', metadataError);
        clearCache();
        return null;
      }
    }
    
    // PASO 4: Fallback a cach√© simple (sin metadata)
    console.log('[CacheModule] No hay metadata, intentando cach√© simple...');
    let cached;
    if (useFallback) {
      cached = FALLBACK_CACHE.get(CACHE_KEY);
    } else {
      cached = cache.get(CACHE_KEY);
    }
    
    if (cached) {
      console.log('[CacheModule] Datos simples encontrados en cach√©');
      try {
        const data = JSON.parse(cached);
        console.log('[CacheModule] ‚úÖ Datos simples recuperados exitosamente');
        return data;
      } catch (parseError) {
        console.error('[CacheModule] ‚ùå Error parseando datos simples:', parseError);
        clearCache();
        return null;
      }
    }
    
    console.log('[CacheModule] No se encontraron datos en cach√©');
    return null;
    
  } catch (error) {
    console.error('[CacheModule] ‚ùå Error cr√≠tico al leer de la cach√©:', error);
    clearCache(); // Limpiar cach√© corrupta
    return null;
  }
}

/**
 * ‚úÖ SOLUCI√ìN 2: clearCache que elimina TODA la metadata
 * Incluye DASHBOARD_DATA_META para evitar corrupci√≥n
 */
function clearCache() {
  try {
    // üö® FALLBACK: Si CacheService no funciona, simular √©xito
    let cache;
    try {
      cache = CacheService.getScriptCache();
    } catch (cacheError) {
      console.warn('[Cache] ‚ö†Ô∏è CacheService no disponible, simulando limpieza:', cacheError);
      return {
        success: true,
        cacheType: 'disabled',
        fragmentsRemoved: 0,
        metadataRemoved: 0,
        timestamp: new Date().toISOString()
      };
    }
    let fragmentsRemoved = 0;
    let cacheType = 'unknown';
    
    console.log('[CacheModule] üßπ Iniciando limpieza completa de cach√©...');
    
    // PASO 1: Leer metadata para saber cu√°ntos fragmentos hay
    const metadataStr = cache.get('DASHBOARD_DATA_META');
    if (metadataStr) {
      try {
        const metadata = JSON.parse(metadataStr);
        cacheType = 'fragmented';
        const expectedFragments = metadata.fragments || 0;
        
        console.log(`[CacheModule] Metadata encontrada: ${expectedFragments} fragmentos`);
        
        // Eliminar todos los fragmentos
        const keysToRemove = [];
        for (let i = 0; i < expectedFragments; i++) {
          const fragmentKey = `${CACHE_KEY}_${i}`;
          if (cache.get(fragmentKey)) {
            keysToRemove.push(fragmentKey);
            fragmentsRemoved++;
          }
        }
        
        if (keysToRemove.length > 0) {
          cache.removeAll(keysToRemove);
          console.log(`[CacheModule] ${fragmentsRemoved} fragmentos eliminados`);
        }
        
      } catch (metadataError) {
        console.warn('[CacheModule] ‚ö†Ô∏è Error leyendo metadata, limpieza de emergencia...');
        cacheType = 'emergency';
        fragmentsRemoved = clearCacheEmergency(cache);
      }
    } else {
      // Cach√© simple
      cacheType = 'simple';
      const hadSimpleData = !!cache.get(CACHE_KEY);
      if (hadSimpleData) {
        console.log('[CacheModule] Limpiando cach√© simple...');
      }
    }
    
    // ‚úÖ PASO 2: ELIMINAR TODA LA METADATA (ambas claves)
    console.log('[CacheModule] üóëÔ∏è Eliminando metadata...');
    
    const metadataKeys = [
      'DASHBOARD_META',           // ‚úÖ Metadata vieja
      'DASHBOARD_DATA_META'       // ‚úÖ Metadata nueva (CR√çTICO)
    ];
    
    metadataKeys.forEach(key => {
      const hadKey = !!cache.get(key);
      cache.remove(key);
      if (hadKey) {
        console.log(`[CacheModule]   ‚úÖ ${key} eliminada`);
      }
    });
    
    // PASO 3: Eliminar clave principal
    cache.remove(CACHE_KEY);
    console.log(`[CacheModule]   ‚úÖ ${CACHE_KEY} eliminada`);
    
    // PASO 4: Limpiar tambi√©n sistema unificado (si existe)
    if (typeof UnifiedCache !== 'undefined' && UnifiedCache.invalidateKey) {
      try {
        UnifiedCache.invalidateKey('UNIFIED_DASHBOARD_V3');
        console.log('[CacheModule]   ‚úÖ Cach√© unificado invalidado');
      } catch (e) {
        console.warn('[CacheModule]   ‚ö†Ô∏è No se pudo invalidar cach√© unificado');
      }
    }
    
    // üîß CORRECCI√ìN: Limpiar fallback si est√° habilitado
    if (FALLBACK_CACHE && FALLBACK_CACHE.enabled) {
      console.log('[CacheModule] üßπ Limpiando fallback (PropertiesService)...');
      
      // Limpiar claves principales
      FALLBACK_CACHE.remove(CACHE_KEY);
      FALLBACK_CACHE.remove('DASHBOARD_DATA_META');
      FALLBACK_CACHE.remove('DASHBOARD_META');
      
      // Limpiar fragmentos fallback
      for (let i = 0; i < 20; i++) {
        FALLBACK_CACHE.remove(`${CACHE_KEY}_${i}`);
      }
      
      // Limpiar claves temporales de verificaci√≥n
      FALLBACK_CACHE.remove('TEST_FALLBACK');
      FALLBACK_CACHE.remove('TEST_CACHE_CHECK_' + Date.now());
      
      console.log('[CacheModule]   ‚úÖ Fallback limpiado');
    }
    
    console.log('[CacheModule] ‚úÖ Limpieza completa exitosa');
    console.log(`[CacheModule] üìä Tipo: ${cacheType}, Fragmentos: ${fragmentsRemoved}`);
    
    return {
      success: true,
      cacheType: cacheType,
      fragmentsRemoved: fragmentsRemoved,
      metadataRemoved: metadataKeys.length,
      timestamp: new Date().toISOString()
    };
    
  } catch (error) {
    console.error('[CacheModule] ‚ùå Error cr√≠tico al limpiar cach√©:', error);
    return {
      success: false,
      error: error.toString(),
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * Limpieza de emergencia cuando la metadata est√° corrupta
 * @param {CacheService} cache - Instancia del servicio de cach√©
 * @returns {number} N√∫mero de fragmentos eliminados
 */
function clearCacheEmergency(cache) {
  console.log('[CacheModule] üö® EMERGENCIA: Limpiando 0-20 fragmentos...');
  
  const keysToRemove = [];
  let fragmentsFound = 0;
  
  // Buscar hasta 20 fragmentos
  for (let i = 0; i < 20; i++) {
    const fragmentKey = `${CACHE_KEY}_${i}`;
    if (cache.get(fragmentKey)) {
      keysToRemove.push(fragmentKey);
      fragmentsFound++;
    }
  }
  
  // Eliminar en lote
  if (keysToRemove.length > 0) {
    cache.removeAll(keysToRemove);
    console.log(`[CacheModule] ${fragmentsFound} fragmentos eliminados`);
  }
  
  // ‚úÖ CR√çTICO: Eliminar AMBAS metadata
  cache.remove('DASHBOARD_META');
  cache.remove('DASHBOARD_DATA_META');
  cache.remove(CACHE_KEY);
  
  // üîß CORRECCI√ìN: Limpiar fallback en emergencia tambi√©n
  if (FALLBACK_CACHE && FALLBACK_CACHE.enabled) {
    console.log('[CacheModule] üßπ Limpieza de emergencia: fallback');
    
    FALLBACK_CACHE.remove(CACHE_KEY);
    FALLBACK_CACHE.remove('DASHBOARD_DATA_META');
    FALLBACK_CACHE.remove('DASHBOARD_META');
    
    // Limpiar fragmentos fallback
    for (let i = 0; i < 20; i++) {
      FALLBACK_CACHE.remove(`${CACHE_KEY}_${i}`);
    }
    
    // Limpiar claves temporales
    FALLBACK_CACHE.remove('TEST_FALLBACK');
    FALLBACK_CACHE.remove('TEST_CACHE_CHECK_' + Date.now());
  }
  
  console.log('[CacheModule] ‚úÖ Limpieza de emergencia completada');
  return fragmentsFound;
}

/**
 * Verifica si hay datos en cach√© (simples o fragmentados).
 * @returns {boolean} True si hay datos en cach√©
 */
function hasCacheData() {
  try {
    const cache = CacheService.getScriptCache();
    
    // Verificar metadata de fragmentaci√≥n
    const metadataStr = cache.get('DASHBOARD_DATA_META');
    if (metadataStr) {
      console.log('[CacheModule] Datos fragmentados detectados en cach√©');
      return true;
    }
    
    // Verificar cach√© simple
    const cached = cache.get(CACHE_KEY);
    if (cached) {
      console.log('[CacheModule] Datos simples detectados en cach√©');
      return true;
    }
    
    console.log('[CacheModule] No hay datos en cach√©');
    return false;
    
  } catch (error) {
    console.error('[CacheModule] Error verificando cach√©:', error);
    return false;
  }
}

/**
 * Obtiene informaci√≥n detallada sobre el estado de la cach√©.
 * @returns {Object} Informaci√≥n completa del estado de la cach√©
 */
function getCacheInfo() {
  try {
    const cache = CacheService.getScriptCache();
    const now = Date.now();
    
    // Verificar metadata de fragmentaci√≥n
    const metadataStr = cache.get('DASHBOARD_DATA_META');
    if (metadataStr) {
      try {
        const metadata = JSON.parse(metadataStr);
        const ageMinutes = metadata.timestamp ? Math.floor((now - metadata.timestamp) / 60000) : 0;
        
        return {
          hasData: true,
          type: 'fragmented',
          fragments: metadata.fragments || 0,
          size: metadata.size || 0,
          sizeKB: metadata.size ? Math.round(metadata.size / 1024 * 100) / 100 : 0,
          age: ageMinutes,
          timestamp: metadata.timestamp,
          originalKey: metadata.originalKey || CACHE_KEY,
          duration: CONFIG.CACHE.DURATION,
          ageText: ageMinutes < 1 ? 'menos de 1 minuto' : 
                   ageMinutes === 1 ? '1 minuto' : 
                   `${ageMinutes} minutos`
        };
      } catch (metadataError) {
        console.warn('[CacheModule] Error parseando metadata:', metadataError);
        // Fallback a verificaci√≥n manual
      }
    }
    
    // Verificar cach√© simple
    const cached = cache.get(CACHE_KEY);
    if (cached) {
      return {
        hasData: true,
        type: 'simple',
        fragments: 1,
        size: cached.length,
        sizeKB: Math.round(cached.length / 1024 * 100) / 100,
        age: 0, // No tenemos timestamp para cach√© simple
        timestamp: null,
        key: CACHE_KEY,
        duration: CONFIG.CACHE.DURATION,
        ageText: 'desconocida'
      };
    }
    
    return {
      hasData: false,
      type: 'none',
      fragments: 0,
      size: 0,
      sizeKB: 0,
      age: 0,
      timestamp: null,
      key: CACHE_KEY,
      duration: CONFIG.CACHE.DURATION,
      ageText: 'N/A'
    };
    
  } catch (error) {
    console.error('[CacheModule] Error obteniendo informaci√≥n de cach√©:', error);
    return {
      hasData: false,
      type: 'error',
      fragments: 0,
      size: 0,
      sizeKB: 0,
      age: 0,
      timestamp: null,
      key: CACHE_KEY,
      duration: CONFIG.CACHE.DURATION,
      ageText: 'Error',
      error: error.message
    };
  }
}

/**
 * Limpia la cach√© manualmente y proporciona feedback detallado
 * @returns {Object} Resultado de la operaci√≥n
 */
function limpiarCacheManualmente() {
  try {
    console.log('[CacheModule] Iniciando limpieza manual de cach√©...');
    
    // Obtener informaci√≥n antes de limpiar
    const infoBefore = getCacheInfo();
    console.log('[CacheModule] Estado de cach√© antes de limpiar:', infoBefore);
    
    // Limpiar cach√© usando la funci√≥n mejorada
    const clearResult = clearCache();
    
    // Verificar que se limpi√≥ correctamente
    const infoAfter = getCacheInfo();
    console.log('[CacheModule] Estado de cach√© despu√©s de limpiar:', infoAfter);
    
    if (clearResult.success) {
      console.log(`[CacheModule] ‚úÖ Cach√© limpiada manualmente (tipo: ${clearResult.cacheType})`);
      
      return {
        success: true,
        message: 'Cach√© limpiada correctamente',
        cache_type: clearResult.cacheType,
        fragments_removed: clearResult.fragmentsRemoved,
        data_size_before: infoBefore.size,
        data_size_after: infoAfter.size,
        sizeKB_before: infoBefore.sizeKB,
        sizeKB_after: infoAfter.sizeKB,
        age_before: infoBefore.ageText,
        timestamp: clearResult.timestamp
      };
    } else {
      console.log('[CacheModule] ‚ùå Error en limpieza de cach√©');
      return {
        success: false,
        error: clearResult.error,
        cache_type: infoBefore.type,
        fragments_removed: 0,
        timestamp: clearResult.timestamp
      };
    }
    
  } catch (error) {
    console.error('[CacheModule] Error al limpiar cach√© manualmente:', error);
    return {
      success: false,
      error: error.toString(),
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * Funci√≥n robusta de limpieza completa del sistema
 * Limpia todas las cach√©s conocidas y reinicia el sistema
 * @returns {Object} Resultado completo de la limpieza
 */
function limpiarCacheRobustoCompleto() {
  try {
    console.log('üßπ INICIANDO LIMPIEZA ROBUSTA COMPLETA DEL SISTEMA');
    const startTime = Date.now();
    
    const resultado = {
      success: true,
      timestamp: new Date().toISOString(),
      operaciones: {},
      errores: []
    };
    
    // 1. Limpiar cach√© principal
    try {
      console.log('üßπ Limpiando cach√© principal...');
      resultado.operaciones.cache_principal = clearCache();
    } catch (error) {
      resultado.errores.push(`Cache principal: ${error.toString()}`);
    }
    
    // 2. Limpiar cach√© de estad√≠sticas r√°pidas
    try {
      console.log('üßπ Limpiando cach√© de estad√≠sticas...');
      const cache = CacheService.getScriptCache();
      cache.remove('STATS_RAPIDAS_V2');
      resultado.operaciones.stats_rapidas = true;
    } catch (error) {
      resultado.errores.push(`Stats r√°pidas: ${error.toString()}`);
    }
    
    // 3. Limpiar todas las claves conocidas del sistema
    try {
      console.log('üßπ Limpieza exhaustiva de claves conocidas...');
      const cache = CacheService.getScriptCache();
      const clavesConocidas = [
        'DASHBOARD_DATA_V2',
        'STATS_RAPIDAS_V2', 
        'LD_FULL_',
        'ACTIVIDAD_CACHE',
        'DIRECTORIO_COMPLETO',
        'CACHE_GRAFICOS'
      ];
      
      let clavesLimpiadas = 0;
      clavesConocidas.forEach(clave => {
        try {
          cache.remove(clave);
          clavesLimpiadas++;
        } catch (e) {
          // Ignorar errores de claves individuales
        }
      });
      
      resultado.operaciones.claves_limpiadas = clavesLimpiadas;
    } catch (error) {
      resultado.errores.push(`Limpieza claves: ${error.toString()}`);
    }
    
    // 4. Forzar recarga de datos cr√≠ticos
    try {
      console.log('üîÑ Forzando recarga de datos cr√≠ticos...');
      if (typeof cargarDirectorioCompleto === 'function') {
        cargarDirectorioCompleto(true); // forceReload = true
        resultado.operaciones.recarga_directorio = true;
      }
    } catch (error) {
      resultado.errores.push(`Recarga directorio: ${error.toString()}`);
    }
    
    const timeElapsed = Date.now() - startTime;
    resultado.tiempo_total_ms = timeElapsed;
    
    if (resultado.errores.length === 0) {
      console.log(`‚úÖ LIMPIEZA ROBUSTA COMPLETADA EN ${timeElapsed}ms`);
      resultado.mensaje = 'Sistema completamente limpio y reiniciado';
    } else {
      console.log(`‚ö†Ô∏è LIMPIEZA COMPLETADA CON ${resultado.errores.length} ERRORES EN ${timeElapsed}ms`);
      resultado.success = false;
      resultado.mensaje = `Limpieza parcial: ${resultado.errores.length} errores encontrados`;
    }
    
    return resultado;
    
  } catch (error) {
    console.error('‚ùå ERROR CR√çTICO EN LIMPIEZA ROBUSTA:', error);
    return {
      success: false,
      error: error.toString(),
      timestamp: new Date().toISOString(),
      mensaje: 'Error cr√≠tico durante la limpieza'
    };
  }
}

/**
 * Test simple para diagnosticar problemas de cach√©
 */
function testCacheSimple() {
  console.log('üß™ TEST SIMPLE DE CACH√â');
  console.log('='.repeat(40));
  
  // Verificar si CacheService est√° disponible
  try {
    const cache = CacheService.getScriptCache();
    console.log('‚úÖ CacheService.getScriptCache() disponible');
    console.log(`üîç Tipo de cache: ${typeof cache}`);
    console.log(`üîç M√©todos disponibles: ${Object.getOwnPropertyNames(cache).join(', ')}`);
  } catch (error) {
    console.error('‚ùå ERROR CR√çTICO: CacheService no disponible:', error);
    return;
  }
  
  const cache = CacheService.getScriptCache();
  
  // Test 1: Clave muy simple
  console.log('\nüìù TEST 1: Clave simple');
  const testKey1 = 'TEST_SIMPLE';
  const testData1 = 'Hola mundo';
  const success1 = cache.put(testKey1, testData1, 60);
  console.log(`Clave: "${testKey1}", Datos: "${testData1}", √âxito: ${success1 ? '‚úÖ' : '‚ùå'}`);
  
  if (success1) {
    const retrieved1 = cache.get(testKey1);
    console.log(`Recuperado: "${retrieved1}", Coincide: ${retrieved1 === testData1 ? '‚úÖ' : '‚ùå'}`);
    cache.remove(testKey1);
  }
  
  // Test 2: Clave larga (como la real)
  console.log('\nüìù TEST 2: Clave larga');
  const testKey2 = 'DASHBOARD_CONSOLIDATED_V1';
  const testData2 = 'Test data';
  const success2 = cache.put(testKey2, testData2, 60);
  console.log(`Clave: "${testKey2}", Datos: "${testData2}", √âxito: ${success2 ? '‚úÖ' : '‚ùå'}`);
  
  if (success2) {
    const retrieved2 = cache.get(testKey2);
    console.log(`Recuperado: "${retrieved2}", Coincide: ${retrieved2 === testData2 ? '‚úÖ' : '‚ùå'}`);
    cache.remove(testKey2);
  }
  
  // Test 3: Datos grandes
  console.log('\nüìù TEST 3: Datos grandes');
  const testKey3 = 'TEST_LARGE';
  const testData3 = 'x'.repeat(10000); // 10KB
  const success3 = cache.put(testKey3, testData3, 60);
  console.log(`Clave: "${testKey3}", Tama√±o: ${testData3.length} bytes, √âxito: ${success3 ? '‚úÖ' : '‚ùå'}`);
  
  if (success3) {
    const retrieved3 = cache.get(testKey3);
    console.log(`Recuperado: ${retrieved3 ? 'S√≠' : 'No'}, Coincide: ${retrieved3 === testData3 ? '‚úÖ' : '‚ùå'}`);
    cache.remove(testKey3);
  }
  
  console.log('\n' + '='.repeat(40));
  console.log('‚úÖ Test simple completado');
}

/**
 * Diagn√≥stico avanzado del problema de cach√©
 */
function diagnosticarCacheCompleto() {
  console.log('üîç DIAGN√ìSTICO AVANZADO DE CACH√â');
  console.log('='.repeat(50));
  
  // Test 1: Verificar CacheService
  console.log('\nüìã TEST 1: Verificaci√≥n de CacheService');
  try {
    const cache = CacheService.getScriptCache();
    console.log('‚úÖ CacheService.getScriptCache() OK');
    console.log(`üîç Tipo: ${typeof cache}`);
    console.log(`üîç Constructor: ${cache.constructor.name}`);
    
    // Verificar m√©todos
    const methods = ['put', 'get', 'remove', 'removeAll'];
    methods.forEach(method => {
      const exists = typeof cache[method] === 'function';
      console.log(`üîç ${method}(): ${exists ? '‚úÖ' : '‚ùå'}`);
    });
    
  } catch (error) {
    console.error('‚ùå CacheService.getScriptCache() FALLA:', error);
    return;
  }
  
  // Test 2: Verificar permisos
  console.log('\nüìã TEST 2: Verificaci√≥n de permisos');
  try {
    const cache = CacheService.getScriptCache();
    const testKey = 'PERMISSION_TEST';
    const testData = 'test';
    
    // Intentar put
    const putResult = cache.put(testKey, testData, 60);
    console.log(`üîç cache.put(): ${putResult ? '‚úÖ' : '‚ùå'}`);
    
    if (putResult) {
      // Intentar get
      const getResult = cache.get(testKey);
      console.log(`üîç cache.get(): ${getResult ? '‚úÖ' : '‚ùå'}`);
      console.log(`üîç Datos recuperados: "${getResult}"`);
      
      // Intentar remove
      cache.remove(testKey);
      console.log('üîç cache.remove(): ‚úÖ');
    }
    
  } catch (error) {
    console.error('‚ùå Error en test de permisos:', error);
  }
  
  // Test 3: Verificar l√≠mites
  console.log('\nüìã TEST 3: Verificaci√≥n de l√≠mites');
  try {
    const cache = CacheService.getScriptCache();
    
    // Test con datos muy peque√±os
    const tinyData = 'x';
    const tinyResult = cache.put('TINY', tinyData, 60);
    console.log(`üîç Datos m√≠nimos (1 byte): ${tinyResult ? '‚úÖ' : '‚ùå'}`);
    if (tinyResult) cache.remove('TINY');
    
    // Test con clave muy corta
    const shortKey = 'A';
    const shortResult = cache.put(shortKey, 'test', 60);
    console.log(`üîç Clave m√≠nima (1 char): ${shortResult ? '‚úÖ' : '‚ùå'}`);
    if (shortResult) cache.remove(shortKey);
    
    // Test con TTL m√≠nimo
    const ttlResult = cache.put('TTL_TEST', 'test', 1);
    console.log(`üîç TTL m√≠nimo (1s): ${ttlResult ? '‚úÖ' : '‚ùå'}`);
    if (ttlResult) cache.remove('TTL_TEST');
    
  } catch (error) {
    console.error('‚ùå Error en test de l√≠mites:', error);
  }
  
  console.log('\n' + '='.repeat(50));
  console.log('‚úÖ Diagn√≥stico completado');
}

/**
 * Test del sistema de fallback con PropertiesService
 */
function testFallbackCache() {
  console.log('üß™ TEST DE FALLBACK CACHE');
  console.log('='.repeat(40));
  
  // Inicializar fallback
  FALLBACK_CACHE.init();
  
  if (!FALLBACK_CACHE.enabled) {
    console.log('‚ö†Ô∏è Fallback no est√° habilitado (CacheService funciona)');
    return;
  }
  
  console.log('‚úÖ Fallback habilitado, probando...');
  
  // Test 1: Datos simples
  console.log('\nüìù TEST 1: Datos simples');
  const testData1 = { test: 'Hola mundo', timestamp: Date.now() };
  const success1 = setCacheData(testData1, 60);
  console.log(`Guardado: ${success1 ? '‚úÖ' : '‚ùå'}`);
  
  const retrieved1 = getCacheData();
  const match1 = retrieved1 && retrieved1.test === testData1.test;
  console.log(`Recuperado: ${match1 ? '‚úÖ' : '‚ùå'}`);
  
  // Test 2: Datos grandes (fragmentaci√≥n)
  console.log('\nüì¶ TEST 2: Datos grandes');
  clearCache(); // Limpiar antes
  
  const testData2 = { test: 'x'.repeat(80000), size: 'large' };
  const success2 = setCacheData(testData2, 60);
  console.log(`Guardado fragmentado: ${success2 ? '‚úÖ' : '‚ùå'}`);
  
  const retrieved2 = getCacheData();
  const match2 = retrieved2 && retrieved2.test === testData2.test;
  console.log(`Recuperado fragmentado: ${match2 ? '‚úÖ' : '‚ùå'}`);
  
  // Test 3: Metadata
  console.log('\nüìã TEST 3: Metadata');
  const metadata = FALLBACK_CACHE.get('DASHBOARD_DATA_META');
  if (metadata) {
    const meta = JSON.parse(metadata);
    console.log(`Metadata encontrada: fragments=${meta.fragments}, size=${meta.size}`);
  } else {
    console.log('‚ùå No hay metadata');
  }
  
  console.log('\n' + '='.repeat(40));
  console.log('‚úÖ Test de fallback completado');
}

/**
 * Test de regresi√≥n completo del sistema de cach√© corregido
 */
function testCacheCompleto() {
  console.log('üß™ TEST COMPLETO DEL SISTEMA DE CACH√â');
  console.log('='.repeat(60));
  
  const resultados = {
    timestamp: new Date().toISOString(),
    tests: {},
    exito: true
  };
  
  // Test 1: CacheService debe ser detectado correctamente
  console.log('\nüìã TEST 1: Detecci√≥n de CacheService');
  try {
    const cacheWorks = FALLBACK_CACHE.checkCacheService();
    console.log(`CacheService detectado: ${cacheWorks ? '‚úÖ' : '‚ùå'}`);
    resultados.tests.deteccion_cache = cacheWorks;
    
    if (!cacheWorks) {
      console.log('‚ö†Ô∏è CacheService no funcional, usando fallback');
    }
  } catch (error) {
    console.error('‚ùå Error en detecci√≥n:', error);
    resultados.tests.deteccion_cache = false;
    resultados.exito = false;
  }
  
  // Test 2: Datos peque√±os (< 8KB) deben funcionar
  console.log('\nüìã TEST 2: Datos peque√±os');
  try {
    clearCache();
    const smallData = { test: 'x'.repeat(7000), timestamp: Date.now() };
    const saved = setCacheData(smallData, 60);
    const retrieved = getCacheData();
    const match = retrieved && retrieved.test === smallData.test;
    
    console.log(`Guardado: ${saved ? '‚úÖ' : '‚ùå'}`);
    console.log(`Recuperado: ${match ? '‚úÖ' : '‚ùå'}`);
    
    resultados.tests.datos_pequenos = saved && match;
    if (!resultados.tests.datos_pequenos) resultados.exito = false;
  } catch (error) {
    console.error('‚ùå Error en datos peque√±os:', error);
    resultados.tests.datos_pequenos = false;
    resultados.exito = false;
  }
  
  // Test 3: Datos medianos (8-72KB) con fallback
  console.log('\nüìã TEST 3: Datos medianos (fallback)');
  try {
    clearCache();
    const mediumData = { test: 'y'.repeat(50000), timestamp: Date.now() };
    const saved = setCacheData(mediumData, 60);
    const retrieved = getCacheData();
    const match = retrieved && retrieved.test === mediumData.test;
    
    console.log(`Guardado: ${saved ? '‚úÖ' : '‚ùå'}`);
    console.log(`Recuperado: ${match ? '‚úÖ' : '‚ùå'}`);
    
    resultados.tests.datos_medianos = saved && match;
    if (!resultados.tests.datos_medianos) resultados.exito = false;
  } catch (error) {
    console.error('‚ùå Error en datos medianos:', error);
    resultados.tests.datos_medianos = false;
    resultados.exito = false;
  }
  
  // Test 4: Datos muy grandes (>72KB) deben ser rechazados en fallback
  console.log('\nüìã TEST 4: Datos muy grandes (deben ser rechazados)');
  try {
    clearCache();
    const largeData = { test: 'z'.repeat(80000), timestamp: Date.now() };
    const saved = setCacheData(largeData, 60);
    
    // Si fallback est√° activo, debe rechazar datos muy grandes
    const shouldReject = FALLBACK_CACHE.enabled;
    const correctBehavior = shouldReject ? !saved : saved;
    
    console.log(`Datos grandes: ${saved ? 'Guardados' : 'Rechazados'}`);
    console.log(`Comportamiento correcto: ${correctBehavior ? '‚úÖ' : '‚ùå'}`);
    
    resultados.tests.datos_grandes = correctBehavior;
    if (!resultados.tests.datos_grandes) resultados.exito = false;
  } catch (error) {
    console.error('‚ùå Error en datos grandes:', error);
    resultados.tests.datos_grandes = false;
    resultados.exito = false;
  }
  
  // Test 5: clearCache debe limpiar ambos sistemas
  console.log('\nüìã TEST 5: Limpieza completa');
  try {
    // Guardar datos primero
    setCacheData({ test: 'cleanup_test' }, 60);
    
    // Limpiar
    const clearResult = clearCache();
    
    // Verificar que no hay datos
    const afterClear = getCacheData();
    const isClean = !afterClear;
    
    console.log(`Limpieza exitosa: ${clearResult.success ? '‚úÖ' : '‚ùå'}`);
    console.log(`Datos eliminados: ${isClean ? '‚úÖ' : '‚ùå'}`);
    
    resultados.tests.limpieza_completa = clearResult.success && isClean;
    if (!resultados.tests.limpieza_completa) resultados.exito = false;
  } catch (error) {
    console.error('‚ùå Error en limpieza:', error);
    resultados.tests.limpieza_completa = false;
    resultados.exito = false;
  }
  
  // Resumen final
  console.log('\n' + '='.repeat(60));
  console.log('üìä RESUMEN DE TESTS');
  console.log('='.repeat(60));
  
  Object.keys(resultados.tests).forEach(test => {
    const resultado = resultados.tests[test];
    const icon = resultado ? '‚úÖ' : '‚ùå';
    console.log(`${icon} ${test}: ${resultado ? 'PASS' : 'FAIL'}`);
  });
  
  console.log('\n' + (resultados.exito ? 'üéâ TODOS LOS TESTS PASARON' : '‚ö†Ô∏è ALGUNOS TESTS FALLARON'));
  console.log(`üìÖ Timestamp: ${resultados.timestamp}`);
  
  return resultados;
}

console.log('üì¶ CacheModule cargado - Sistema de cach√© con fragmentaci√≥n autom√°tica');
