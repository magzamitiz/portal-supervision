/**
 * @fileoverview M√≥dulo de cach√© con compresi√≥n GZIP.
 * Implementa el sistema de cach√© exacto del c√≥digo original.
 */

// ==================== CONFIGURACI√ìN DEL M√ìDULO ====================

const CACHE_KEY = 'DASHBOARD_DATA_V2';

// ==================== FUNCIONES DE CACH√â ====================

/**
 * Guarda los datos procesados en la cach√© usando compresi√≥n GZIP.
 * @param {Object} data - Datos a guardar en cach√©
 */
function setCacheData(data) {
  try {
    const cache = CacheService.getScriptCache();
    // Comprimir datos para ahorrar espacio y evitar l√≠mites de tama√±o de cach√© (100KB)
    const compressedData = Utilities.gzip(Utilities.newBlob(JSON.stringify(data)));
    cache.put(CACHE_KEY, Utilities.base64Encode(compressedData.getBytes()), CONFIG.CACHE.DURATION);
    console.log(`Datos guardados en cach√© (Comprimidos). Expiraci√≥n en ${CONFIG.CACHE.DURATION} segundos.`);
  } catch (error) {
    console.error('Error al guardar en cach√© (Quiz√°s los datos son muy grandes):', error);
  }
}

/**
 * Recupera y descomprime los datos de la cach√©.
 * @returns {Object|null} Datos descomprimidos o null si no hay cach√©
 */
function getCacheData() {
  try {
    const cache = CacheService.getScriptCache();
    const cached = cache.get(CACHE_KEY);
    if (cached) {
      // Descomprimir datos
      const compressedBlob = Utilities.newBlob(Utilities.base64Decode(cached), 'application/x-gzip');
      const decompressedBlob = compressedBlob.unzip();
      const data = JSON.parse(decompressedBlob.getDataAsString());
      console.log('Datos recuperados de la cach√©.');
      return data;
    }
  } catch (error) {
    console.error('Error al leer/descomprimir de la cach√©:', error);
    clearCache(); // Si hay error, limpiar la cach√© corrupta
  }
  return null;
}

/**
 * Limpia la cach√© manualmente.
 */
function clearCache() {
  CacheService.getScriptCache().remove(CACHE_KEY);
  console.log('Cach√© limpiada.');
}

/**
 * Verifica si hay datos en cach√©.
 * @returns {boolean} True si hay datos en cach√©
 */
function hasCacheData() {
  try {
    const cache = CacheService.getScriptCache();
    const cached = cache.get(CACHE_KEY);
    return cached !== null;
  } catch (error) {
    console.error('Error verificando cach√©:', error);
    return false;
  }
}

/**
 * Obtiene informaci√≥n sobre el estado de la cach√©.
 * @returns {Object} Informaci√≥n del estado de la cach√©
 */
function getCacheInfo() {
  try {
    const cache = CacheService.getScriptCache();
    const cached = cache.get(CACHE_KEY);
    return {
      hasData: cached !== null,
      size: cached ? cached.length : 0,
      key: CACHE_KEY,
      duration: CONFIG.CACHE.DURATION
    };
  } catch (error) {
    console.error('Error obteniendo informaci√≥n de cach√©:', error);
    return {
      hasData: false,
      size: 0,
      key: CACHE_KEY,
      duration: CONFIG.CACHE.DURATION,
      error: error.message
    };
  }
}

/**
 * Limpia la cach√© manualmente y proporciona feedback
 * @returns {Object} Resultado de la operaci√≥n
 */
function limpiarCacheManualmente() {
  try {
    console.log('[CacheModule] Iniciando limpieza manual de cach√©...');
    
    const cache = CacheService.getScriptCache();
    
    // Verificar si hay datos en cach√© antes de limpiar
    const cached = cache.get(CACHE_KEY);
    const habiaDatos = !!cached;
    
    // Limpiar cach√©
    clearCache();
    
    console.log('[CacheModule] Cach√© limpiada manualmente');
    
    return {
      success: true,
      message: 'Cach√© limpiada correctamente',
      habia_datos: habiaDatos,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('[CacheModule] Error al limpiar cach√© manualmente:', error);
    return {
      success: false,
      error: error.toString(),
      timestamp: new Date().toISOString()
    };
  }
}

console.log('üì¶ CacheModule cargado - Sistema de cach√© con compresi√≥n GZIP');
