/**
 * FUNCI√ìN DE VERIFICACI√ìN R√ÅPIDA
 * Ejecuta esta funci√≥n en Apps Script para verificar los nombres reales de la hoja
 */
function verificarNombresReales() {
  console.log('üîç VERIFICACI√ìN: Nombres reales en _ResumenDashboard');
  console.log('='.repeat(60));
  
  try {
    // Leer la hoja _ResumenDashboard
    const ss = SpreadsheetApp.openById(CONFIG.SHEETS.DIRECTORIO);
    const resumenSheet = ss.getSheetByName('_ResumenDashboard');
    
    if (!resumenSheet) {
      console.error('‚ùå Hoja _ResumenDashboard no encontrada');
      return;
    }
    
    // Leer un rango amplio para capturar todas las m√©tricas
    const valores = resumenSheet.getRange('A1:B30').getValues();
    
    console.log('üìä NOMBRES REALES EN LA HOJA:');
    console.log('='.repeat(50));
    
    const metricas = {};
    valores.forEach((row, index) => {
      if (row[0] && row[0].toString().trim()) {
        const nombre = row[0].toString().trim();
        const valor = row[1] || 0;
        metricas[nombre] = valor;
        
        console.log(`${String(index + 1).padStart(2, '0')}. "${nombre}": ${valor}`);
      }
    });
    
    console.log('\nüîç COMPARACI√ìN CON EL C√ìDIGO:');
    console.log('='.repeat(50));
    
    // Nombres que el c√≥digo busca
    const nombresCodigo = [
      'Total Asistencia C√©lulas',
      'Activos recibiendo c√©lula', 
      '2 a 3 semanas sin recibir celula',
      'M√°s de 1 mes sin recibir celula',
      'L√≠deres hibernando',
      'Total L√≠deres',
      'Total C√©lulas',
      'Total Ingresos',
    ];
    
    nombresCodigo.forEach(nombre => {
      const existe = metricas.hasOwnProperty(nombre);
      const valor = metricas[nombre] || 0;
      const status = existe ? '‚úÖ' : '‚ùå';
      console.log(`${status} "${nombre}": ${existe ? valor : 'NO ENCONTRADO'}`);
    });
    
    console.log('\nüìã RESUMEN:');
    console.log('='.repeat(50));
    
    const coincidencias = nombresCodigo.filter(nombre => metricas.hasOwnProperty(nombre));
    const fallos = nombresCodigo.filter(nombre => !metricas.hasOwnProperty(nombre));
    
    console.log(`‚úÖ Coincidencias: ${coincidencias.length}/${nombresCodigo.length}`);
    console.log(`‚ùå Fallos: ${fallos.length}/${nombresCodigo.length}`);
    
    if (fallos.length > 0) {
      console.log('\n‚ö†Ô∏è NOMBRES QUE FALLAN:');
      fallos.forEach(nombre => {
        console.log(`   - "${nombre}"`);
      });
      
      console.log('\nüí° NOMBRES SIMILARES ENCONTRADOS:');
      fallos.forEach(nombreBuscado => {
        const similares = Object.keys(metricas).filter(nombre => 
          nombre.toLowerCase().includes(nombreBuscado.toLowerCase().split(' ')[0])
        );
        if (similares.length > 0) {
          console.log(`   Para "${nombreBuscado}":`);
          similares.forEach(similar => {
            console.log(`     - "${similar}"`);
          });
        }
      });
    }
    
    return {
      metricas: metricas,
      coincidencias: coincidencias.length,
      fallos: fallos.length,
      nombresFallidos: fallos
    };
    
  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n:', error);
    return null;
  }
}

/**
 * FUNCI√ìN DE PRUEBA R√ÅPIDA
 * Ejecuta esta funci√≥n para probar getEstadisticasRapidas() con los nombres actuales
 */
function probarEstadisticasActuales() {
  console.log('üß™ PRUEBA: getEstadisticasRapidas() con nombres actuales');
  console.log('='.repeat(60));
  
  try {
    const stats = getEstadisticasRapidas();
    
    if (stats.success && stats.data) {
      console.log('‚úÖ getEstadisticasRapidas() ejecutada exitosamente');
      console.log('üìä Datos obtenidos:');
      console.log('  fila1:', stats.data.fila1);
      console.log('  fila2:', stats.data.fila2);
      console.log('  calculadas:', stats.data.calculadas);
      
      // Verificar si hay valores en cero
      const valoresFila1 = Object.values(stats.data.fila1);
      const valoresFila2 = Object.values(stats.data.fila2);
      const todosValores = [...valoresFila1, ...valoresFila2];
      
      const valoresEnCero = todosValores.filter(valor => valor === 0).length;
      const totalValores = todosValores.length;
      
      console.log(`\nüìà An√°lisis de valores:`);
      console.log(`  Total valores: ${totalValores}`);
      console.log(`  Valores en cero: ${valoresEnCero}`);
      console.log(`  Valores no cero: ${totalValores - valoresEnCero}`);
      
      if (valoresEnCero > totalValores / 2) {
        console.log('‚ö†Ô∏è ADVERTENCIA: M√°s de la mitad de valores est√°n en cero');
        console.log('üí° Esto sugiere que hay problemas con los nombres de las m√©tricas');
      } else {
        console.log('‚úÖ La mayor√≠a de valores son no-cero, sistema funcionando');
      }
      
    } else {
      console.error('‚ùå Error en getEstadisticasRapidas():', stats.error);
    }
    
    return stats;
    
  } catch (error) {
    console.error('‚ùå Error cr√≠tico en prueba:', error);
    return null;
  }
}

/**
 * FUNCI√ìN DE VERIFICACI√ìN ESPEC√çFICA PARA LCF Y TASA
 * Verifica si existen las m√©tricas faltantes en la hoja
 */
function verificarLCFyTasa() {
  console.log('üîç VERIFICACI√ìN ESPEC√çFICA: LCF y Tasa de Integraci√≥n');
  console.log('='.repeat(60));
  
  try {
    // Leer la hoja _ResumenDashboard
    const ss = SpreadsheetApp.openById(CONFIG.SHEETS.DIRECTORIO);
    const resumenSheet = ss.getSheetByName('_ResumenDashboard');
    
    if (!resumenSheet) {
      console.error('‚ùå Hoja _ResumenDashboard no encontrada');
      return;
    }
    
    // Leer un rango amplio para capturar todas las m√©tricas
    const valores = resumenSheet.getRange('A1:B30').getValues();
    
    console.log('üìä B√öSQUEDA DE M√âTRICAS FALTANTES:');
    console.log('='.repeat(50));
    
    const metricas = {};
    valores.forEach((row, index) => {
      if (row[0] && row[0].toString().trim()) {
        const nombre = row[0].toString().trim();
        const valor = row[1] || 0;
        metricas[nombre] = valor;
      }
    });
    
    // Buscar variaciones de LCF
    const variacionesLCF = [
      'Total LCF',
      'Total LCFs', 
      'LCF Total',
      'Total L√≠deres C√©lula',
      'L√≠deres C√©lula',
      'LCF'
    ];
    
    console.log('üîç B√öSQUEDA DE LCF:');
    let lcfEncontrado = null;
    variacionesLCF.forEach(variacion => {
      if (metricas.hasOwnProperty(variacion)) {
        console.log(`‚úÖ "${variacion}": ${metricas[variacion]}`);
        lcfEncontrado = { nombre: variacion, valor: metricas[variacion] };
      }
    });
    
    if (!lcfEncontrado) {
      console.log('‚ùå No se encontr√≥ ninguna variaci√≥n de LCF');
      console.log('üí° Sugerencia: Agregar "Total LCF" a la hoja _ResumenDashboard');
    }
    
    // Buscar variaciones de Tasa de Integraci√≥n
    const variacionesTasa = [
      'Tasa Integraci√≥n',
      'Tasa de Integraci√≥n',
      'Tasa Integracion',
      'Integraci√≥n',
      'Tasa'
    ];
    
    console.log('\nüîç B√öSQUEDA DE TASA DE INTEGRACI√ìN:');
    let tasaEncontrada = null;
    variacionesTasa.forEach(variacion => {
      if (metricas.hasOwnProperty(variacion)) {
        console.log(`‚úÖ "${variacion}": ${metricas[variacion]}`);
        tasaEncontrada = { nombre: variacion, valor: metricas[variacion] };
      }
    });
    
    if (!tasaEncontrada) {
      console.log('‚ùå No se encontr√≥ ninguna variaci√≥n de Tasa de Integraci√≥n');
      console.log('üí° Sugerencia: Agregar "Tasa Integraci√≥n" a la hoja _ResumenDashboard');
    }
    
    // Mostrar todas las m√©tricas para referencia
    console.log('\nüìã TODAS LAS M√âTRICAS DISPONIBLES:');
    console.log('='.repeat(50));
    Object.keys(metricas).forEach((nombre, index) => {
      console.log(`${String(index + 1).padStart(2, '0')}. "${nombre}": ${metricas[nombre]}`);
    });
    
    return {
      lcf: lcfEncontrado,
      tasa: tasaEncontrada,
      todasLasMetricas: metricas
    };
    
  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n LCF y Tasa:', error);
    return null;
  }
}
