/**
 * üß™ SUITE DE TESTS SIMPLE
 * Solo los tests esenciales - M√°ximo 500 l√≠neas
 */

console.log('üß™ TestSuiteSimple cargado - Tests esenciales √∫nicamente');

/**
 * üöÄ TEST PRINCIPAL - Verifica que todo funcione
 */
function testPrincipal() {
  console.log('');
  console.log('========================================');
  console.log('üöÄ TEST PRINCIPAL DEL SISTEMA');
  console.log('========================================');
  console.log('');
  
  const resultados = {
    configuracion: false,
    semaforo: false,
    funciones: false
  };
  
  try {
    // Test 1: Configuraci√≥n
    console.log('--- Test 1: Configuraci√≥n ---');
    const config = CONFIG.PERFILES_LIDERES;
    resultados.configuracion = config.EN_DESARROLLO && config.ESTRATEGA_CRECIMIENTO;
    console.log(`‚úÖ Configuraci√≥n de perfiles: ${resultados.configuracion ? 'OK' : 'ERROR'}`);
    
    // Test 2: Perfiles de l√≠deres
    console.log('');
    console.log('--- Test 2: Perfiles de l√≠deres ---');
    const funcionesDisponibles = typeof cargarEstadoLideres === 'function' && typeof integrarPerfilesLideres === 'function';
    resultados.semaforo = funcionesDisponibles;
    console.log(`‚úÖ Perfiles: ${resultados.semaforo ? 'OK' : 'ERROR'}`);
    
    // Test 3: Funciones principales
    console.log('');
    console.log('--- Test 3: Funciones principales ---');
    const start1 = Date.now();
    const lideres = getListaDeLideres();
    const time1 = Date.now() - start1;
    
    const start2 = Date.now();
    const stats = getEstadisticasRapidas();
    const time2 = Date.now() - start2;
    
    resultados.funciones = lideres.success && stats.success;
    console.log(`‚úÖ getListaDeLideres: ${lideres.success ? 'OK' : 'ERROR'} (${time1}ms)`);
    console.log(`‚úÖ getEstadisticasRapidas: ${stats.success ? 'OK' : 'ERROR'} (${time2}ms)`);
    
    // Resumen
    console.log('');
    console.log('========================================');
    console.log('üìä RESUMEN');
    console.log('========================================');
    
    const todoOK = resultados.configuracion && resultados.semaforo && resultados.funciones;
    
    console.log(`‚úÖ Configuraci√≥n: ${resultados.configuracion ? 'OK' : 'ERROR'}`);
    console.log(`‚úÖ Perfiles: ${resultados.semaforo ? 'OK' : 'ERROR'}`);
    console.log(`‚úÖ Funciones: ${resultados.funciones ? 'OK' : 'ERROR'}`);
    
    if (todoOK) {
      console.log('');
      console.log('üéâ ¬°SISTEMA FUNCIONANDO!');
      console.log('üöÄ Sistema de perfiles activo - Listo para usar');
    } else {
      console.log('');
      console.log('‚ö†Ô∏è SISTEMA CON PROBLEMAS');
      console.log('üîß Revisar logs anteriores');
    }
    
    return {
      exitoso: todoOK,
      resultados: resultados,
      tiempo_total: time1 + time2
    };
    
  } catch (error) {
    console.error('‚ùå Error en test principal:', error);
    return {
      exitoso: false,
      error: error.toString()
    };
  }
}

/**
 * üéØ TEST PERFILES - Verifica los perfiles de l√≠deres desde _EstadoLideres
 */
function testPerfiles() {
  console.log('');
  console.log('========================================');
  console.log('üéØ TEST PERFILES DE L√çDERES');
  console.log('========================================');
  console.log('');
  
  try {
    // Verificar funciones
    const funcionesOK = typeof cargarEstadoLideres === 'function' && typeof integrarPerfilesLideres === 'function';
    console.log(`‚úÖ Funciones disponibles: ${funcionesOK ? 'S√ç' : 'NO'}`);
    
    if (!funcionesOK) {
      console.log('‚ùå Funciones de perfiles no disponibles');
      return { exitoso: false };
    }
    
    // Probar carga de estados
    const start = Date.now();
    const estadosMap = cargarEstadoLideres();
    const time = Date.now() - start;
    
    console.log(`‚úÖ Carga de estados: OK (${time}ms)`);
    console.log(`üìä L√≠deres con perfil: ${estadosMap.size}`);
    
    // Probar integraci√≥n
    const lideresTest = [
      { ID_Lider: 'LCF-1010', Nombre_Lider: 'Test LCF 1', Rol: 'LCF' },
      { ID_Lider: 'LCF-1014', Nombre_Lider: 'Test LCF 2', Rol: 'LCF' }
    ];
    
    const lideresConPerfil = integrarPerfilesLideres(lideresTest, estadosMap);
    const todosConPerfil = lideresConPerfil.every(l => l.Perfil_Lider);
    
    console.log(`‚úÖ Integraci√≥n de perfiles: ${todosConPerfil ? 'OK' : 'ERROR'}`);
    
    // Mostrar ejemplos con IDP y perfil
    console.log('');
    console.log('üìä EJEMPLOS DE PERFILES:');
    lideresConPerfil.slice(0, 5).forEach(lider => {
      const emoji = lider.Perfil_Lider.includes('ESTRATEGA') ? 'üöÄ' : 
                   lider.Perfil_Lider.includes('CONECTOR') ? 'üéØ' : 
                   lider.Perfil_Lider.includes('ACTIVADOR') ? '‚ö°' : 'üå±';
      console.log(`  ${emoji} ${lider.Nombre_Lider}`);
      console.log(`     IDP: ${lider.IDP || 0} | Perfil: ${lider.Perfil_Lider}`);
      console.log(`     C√©lulas: ${lider.Celulas_Activas || 0} | Visitas: ${lider.Visitas_Positivas || 0}`);
    });
    
    console.log('');
    console.log('üéâ ¬°SISTEMA DE PERFILES FUNCIONANDO!');
    console.log('üöÄ ESTRATEGA DE CRECIMIENTO: IDP ‚â• 36');
    console.log('üéØ CONECTOR EFICAZ: IDP 16-35');
    console.log('‚ö° ACTIVADOR INICIAL: IDP 6-15');
    console.log('üå± EN DESARROLLO: IDP 0-5');
    
    return {
      exitoso: true,
      tiempo_ms: time,
      lideres_procesados: lideresConPerfil.length,
      lideres_con_perfil: estadosMap.size
    };
    
  } catch (error) {
    console.error('‚ùå Error en test de perfiles:', error);
    return { exitoso: false, error: error.toString() };
  }
}

/**
 * ‚ö° TEST R√ÅPIDO - Verificaci√≥n r√°pida
 */
function testRapido() {
  console.log('');
  console.log('========================================');
  console.log('‚ö° TEST R√ÅPIDO');
  console.log('========================================');
  console.log('');
  
  try {
    const start = Date.now();
    
    // Test 1: getListaDeLideres
    const lideres = getListaDeLideres();
    const time1 = Date.now() - start;
    
    // Test 2: getEstadisticasRapidas
    const stats = getEstadisticasRapidas();
    const time2 = Date.now() - start;
    
    console.log(`‚úÖ getListaDeLideres: ${lideres.success ? 'OK' : 'ERROR'} (${time1}ms)`);
    console.log(`‚úÖ getEstadisticasRapidas: ${stats.success ? 'OK' : 'ERROR'} (${time2}ms)`);
    
    const todoOK = lideres.success && stats.success;
    const tiempoTotal = time2;
    
    console.log('');
    console.log(`üìä Tiempo total: ${tiempoTotal}ms`);
    console.log(`üìä L√≠deres: ${lideres.data ? lideres.data.length : 0}`);
    console.log(`üìä Estad√≠sticas: ${stats.success ? 'OK' : 'ERROR'}`);
    
    if (todoOK) {
      console.log('üéâ ¬°TEST R√ÅPIDO EXITOSO!');
    } else {
      console.log('‚ö†Ô∏è TEST R√ÅPIDO CON PROBLEMAS');
    }
    
    return {
      exitoso: todoOK,
      tiempo_ms: tiempoTotal,
      lideres: lideres.data ? lideres.data.length : 0
    };
    
  } catch (error) {
    console.error('‚ùå Error en test r√°pido:', error);
    return { exitoso: false, error: error.toString() };
  }
}

/**
 * üßπ LIMPIAR CACH√â - Limpia el cach√© y prueba
 */
function limpiarCache() {
  console.log('');
  console.log('========================================');
  console.log('üßπ LIMPIAR CACH√â');
  console.log('========================================');
  console.log('');
  
  try {
    // Limpiar cach√©
    CacheService.getScriptCache().removeAll();
    console.log('‚úÖ Cach√© limpiado');
    
    // Probar funciones despu√©s de limpiar
    const start = Date.now();
    const lideres = getListaDeLideres();
    const stats = getEstadisticasRapidas();
    const time = Date.now() - start;
    
    console.log(`‚úÖ Funciones despu√©s de limpiar: ${lideres.success && stats.success ? 'OK' : 'ERROR'}`);
    console.log(`‚è±Ô∏è Tiempo: ${time}ms`);
    
    return {
      exitoso: lideres.success && stats.success,
      tiempo_ms: time
    };
    
  } catch (error) {
    console.error('‚ùå Error limpiando cach√©:', error);
    return { exitoso: false, error: error.toString() };
  }
}

/**
 * üéØ TEST HYBRID - Verifica el sistema hybrid de perfiles + d√≠as de inactividad
 */
function testHybrid() {
  console.log('');
  console.log('========================================');
  console.log('üéØ TEST SISTEMA HYBRID');
  console.log('========================================');
  console.log('');
  
  try {
    // Test 1: Verificar funciones
    console.log('--- Test 1: Funciones disponibles ---');
    const funcionPerfiles = typeof cargarEstadoLideres === 'function';
    const funcionDias = typeof calcularDiasInactividadEquipo === 'function';
    const funcionIntegrar = typeof integrarDiasInactividad === 'function';
    
    console.log(`‚úÖ cargarEstadoLideres: ${funcionPerfiles ? 'OK' : 'ERROR'}`);
    console.log(`‚úÖ calcularDiasInactividadEquipo: ${funcionDias ? 'OK' : 'ERROR'}`);
    console.log(`‚úÖ integrarDiasInactividad: ${funcionIntegrar ? 'OK' : 'ERROR'}`);
    
    if (!funcionPerfiles || !funcionDias || !funcionIntegrar) {
      console.log('‚ùå Funciones h√≠bridas no disponibles');
      return { exitoso: false };
    }
    
    // Test 2: Probar carga de perfiles
    console.log('');
    console.log('--- Test 2: Carga de perfiles ---');
    const start1 = Date.now();
    const estadosMap = cargarEstadoLideres();
    const time1 = Date.now() - start1;
    
    console.log(`‚úÖ Perfiles cargados: ${estadosMap.size} l√≠deres (${time1}ms)`);
    
    // Test 3: Probar c√°lculo de d√≠as de inactividad
    console.log('');
    console.log('--- Test 3: D√≠as de inactividad ---');
    
    // Obtener algunos IDs de LCF para probar
    const lcfIds = Array.from(estadosMap.keys()).slice(0, 5);
    console.log(`Probando con ${lcfIds.length} LCF del equipo`);
    
    const start2 = Date.now();
    const inactividadMap = calcularDiasInactividadEquipo(lcfIds);
    const time2 = Date.now() - start2;
    
    console.log(`‚úÖ D√≠as calculados: ${inactividadMap.size} l√≠deres (${time2}ms)`);
    
    // Test 4: Mostrar ejemplos
    console.log('');
    console.log('--- Test 4: Ejemplos de datos h√≠bridos ---');
    
    let ejemplosCount = 0;
    for (const [id, estado] of estadosMap) {
      if (ejemplosCount >= 3) break;
      
      const inactividad = inactividadMap.get(id);
      
      console.log(`üìä ${estado.Nombre_Lider}`);
      console.log(`   ID: ${id}`);
      console.log(`   Perfil: ${estado.Perfil_Lider} (IDP: ${estado.IDP})`);
      console.log(`   D√≠as inactivo: ${inactividad ? inactividad.dias_inactivo : 'N/A'}`);
      console.log(`   √öltima actividad: ${inactividad && inactividad.ultima_actividad ? new Date(inactividad.ultima_actividad).toLocaleDateString() : 'N/A'}`);
      
      ejemplosCount++;
    }
    
    console.log('');
    console.log('üéâ ¬°SISTEMA HYBRID FUNCIONANDO!');
    console.log('‚úÖ Perfiles pre-calculados (r√°pido)');
    console.log('‚úÖ D√≠as de inactividad calculados por equipo (preciso)');
    console.log('üìä Balance perfecto entre velocidad e informaci√≥n');
    
    return {
      exitoso: true,
      tiempo_perfiles_ms: time1,
      tiempo_dias_ms: time2,
      lideres_con_perfil: estadosMap.size,
      lideres_con_dias: inactividadMap.size
    };
    
  } catch (error) {
    console.error('‚ùå Error en test hybrid:', error);
    return { exitoso: false, error: error.toString() };
  }
}

console.log('üß™ TestSuiteSimple cargado - Ejecuta testPrincipal() o testHybrid() para empezar');
