/**
 * @fileoverview Suite unificada de tests para el Portal de Supervisi√≥n
 * Consolida todos los tests en un solo archivo para mejor mantenimiento
 */

// ==================== CONFIGURACI√ìN DE TESTS ====================

const TEST_SUITE_CONFIG = {
  // IDs de prueba (deben existir en los datos reales)
  TEST_LD_ID: 'LD-4003',
  TEST_LCF_ID: 'LCF-1010',
  TEST_ALMA_ID: 'A001',
  
  // Configuraci√≥n de validaci√≥n
  VALIDATE_STRUCTURE: true,
  VALIDATE_DATA_TYPES: true,
  VALIDATE_REQUIRED_FIELDS: true,
  
  // L√≠mites de tiempo (en ms)
  MAX_LOAD_TIME: 30000,        // 30 segundos para carga completa
  MAX_QUICK_SEARCH_TIME: 1000, // 1 segundo para b√∫squeda r√°pida
  MAX_INDIVIDUAL_LOAD_TIME: 5000 // 5 segundos para funciones individuales
};

// ==================== TESTS DE CONFIGURACI√ìN ====================

/**
 * Test de configuraci√≥n b√°sica
 */
function testConfiguracion() {
  console.log('üß™ [TEST] Iniciando test de configuraci√≥n...');
  
  try {
    // Verificar que CONFIG existe
    if (typeof CONFIG === 'undefined') {
      throw new Error('CONFIG no est√° definido');
    }
    
    // Verificar propiedades b√°sicas
    if (!CONFIG.SHEETS) {
      throw new Error('CONFIG.SHEETS no est√° definido');
    }
    
    if (!CONFIG.TABS) {
      throw new Error('CONFIG.TABS no est√° definido');
    }
    
    if (!CONFIG.CACHE) {
      throw new Error('CONFIG.CACHE no est√° definido');
    }
    
    console.log('‚úÖ [TEST] Configuraci√≥n b√°sica correcta');
    console.log(`   - SHEETS: ${Object.keys(CONFIG.SHEETS).length} configurados`);
    console.log(`   - TABS: ${Object.keys(CONFIG.TABS).length} configurados`);
    console.log(`   - CACHE: ${CONFIG.CACHE.DURATION}s duraci√≥n`);
    
    return { success: true, message: 'Configuraci√≥n correcta' };
    
  } catch (error) {
    console.log('‚ùå [TEST] Error en configuraci√≥n:', error.message);
    return { success: false, error: error.message };
  }
}

// ==================== TESTS DE FUNCIONES INDIVIDUALES ====================

/**
 * Test de funciones optimizadas individuales
 */
function testFuncionesOptimizadas() {
  console.log('üß™ [TEST] Iniciando test de funciones optimizadas...');
  
  const resultados = {
    lideres: null,
    celulas: null,
    ingresos: null
  };
  
  try {
    // Test cargarLideresOptimizado
    console.log('   üìä Probando cargarLideresOptimizado...');
    const t1 = Date.now();
    const lideres = cargarLideresOptimizado();
    const tiempo1 = Date.now() - t1;
    
    resultados.lideres = {
      cantidad: lideres.length,
      tiempo: tiempo1,
      exitoso: tiempo1 < TEST_SUITE_CONFIG.MAX_INDIVIDUAL_LOAD_TIME
    };
    
    console.log(`   ‚úÖ L√≠deres: ${lideres.length} en ${tiempo1}ms`);
    
    // Test cargarCelulasOptimizado
    console.log('   üìä Probando cargarCelulasOptimizado...');
    const t2 = Date.now();
    const celulas = cargarCelulasOptimizado();
    const tiempo2 = Date.now() - t2;
    
    resultados.celulas = {
      cantidad: celulas.length,
      tiempo: tiempo2,
      exitoso: tiempo2 < TEST_SUITE_CONFIG.MAX_INDIVIDUAL_LOAD_TIME
    };
    
    console.log(`   ‚úÖ C√©lulas: ${celulas.length} en ${tiempo2}ms`);
    
    // Test cargarIngresosOptimizado
    console.log('   üìä Probando cargarIngresosOptimizado...');
    const t3 = Date.now();
    const ingresos = cargarIngresosOptimizado();
    const tiempo3 = Date.now() - t3;
    
    resultados.ingresos = {
      cantidad: ingresos.length,
      tiempo: tiempo3,
      exitoso: tiempo3 < TEST_SUITE_CONFIG.MAX_INDIVIDUAL_LOAD_TIME
    };
    
    console.log(`   ‚úÖ Ingresos: ${ingresos.length} en ${tiempo3}ms`);
    
    const todosExitosos = Object.values(resultados).every(r => r.exitoso);
    console.log(`\nüìä RESULTADO: ${todosExitosos ? '‚úÖ TODAS LAS FUNCIONES OPTIMIZADAS' : '‚ö†Ô∏è ALGUNAS FUNCIONES LENTAS'}`);
    
    return { success: todosExitosos, resultados: resultados };
    
  } catch (error) {
    console.log('‚ùå [TEST] Error en funciones optimizadas:', error);
    return { success: false, error: error.toString(), resultados: resultados };
  }
}

// ==================== TESTS DE CACH√â ====================

/**
 * Test de sistema de cach√© fragmentado
 */
function testCacheFragmentado() {
  console.log('üß™ [TEST] Iniciando test de cach√© fragmentado...');
  
  try {
    // Limpiar cach√©
    clearCache();
    
    // Crear datos de prueba
    const testData = {
      lideres: Array.from({length: 100}, (_, i) => ({
        ID_Lider: `LCF-${1000 + i}`,
        Nombre_Lider: `L√≠der ${i + 1}`,
        Rol: 'LCF',
        Estado_Actividad: 'Activo'
      })),
      celulas: Array.from({length: 50}, (_, i) => ({
        ID_Celula: `C-${2000 + i}`,
        ID_LCF_Responsable: `LCF-${1000 + (i % 100)}`,
        Total_Miembros: Math.floor(Math.random() * 10) + 1
      })),
      ingresos: Array.from({length: 200}, (_, i) => ({
        ID_Alma: `A-${3000 + i}`,
        ID_LCF: `LCF-${1000 + (i % 100)}`,
        Nombre: `Alma ${i + 1}`
      })),
      timestamp: new Date().toISOString()
    };
    
    // Guardar en cach√©
    console.log('   üíæ Guardando datos en cach√©...');
    setCacheData(testData);
    
    // Verificar informaci√≥n de cach√©
    const cacheInfo = getCacheInfo();
    console.log(`   üìä Tipo de cach√©: ${cacheInfo.type}`);
    console.log(`   üìä Fragmentos: ${cacheInfo.fragments}`);
    console.log(`   üìä Tama√±o: ${cacheInfo.sizeKB}KB`);
    
    // Recuperar de cach√©
    console.log('   üîÑ Recuperando datos de cach√©...');
    const cachedData = getCacheData();
    
    const exitoso = cachedData && 
                   cachedData.lideres.length === testData.lideres.length &&
                   cachedData.celulas.length === testData.celulas.length &&
                   cachedData.ingresos.length === testData.ingresos.length;
    
    console.log(`\nüìä RESULTADO: ${exitoso ? '‚úÖ CACH√â FRAGMENTADO FUNCIONANDO' : '‚ùå PROBLEMA CON CACH√â'}`);
    
    return { success: exitoso, cacheInfo: cacheInfo };
    
  } catch (error) {
    console.log('‚ùå [TEST] Error en cach√© fragmentado:', error);
    return { success: false, error: error.toString() };
  }
}

// ==================== TESTS DE B√öSQUEDA R√ÅPIDA ====================

/**
 * Test de b√∫squeda r√°pida de LD
 */
function testBusquedaRapida() {
  console.log('üß™ [TEST] Iniciando test de b√∫squeda r√°pida...');
  
  try {
    // Limpiar cach√© espec√≠fica
    const cache = CacheService.getScriptCache();
    cache.remove(`LD_QUICK_${TEST_SUITE_CONFIG.TEST_LD_ID}`);
    
    // Ejecutar b√∫squeda r√°pida
    const startTime = Date.now();
    const resultado = buscarLDRapido(TEST_SUITE_CONFIG.TEST_LD_ID);
    const tiempo = Date.now() - startTime;
    
    console.log(`   ‚è±Ô∏è Tiempo: ${tiempo}ms (objetivo: <${TEST_SUITE_CONFIG.MAX_QUICK_SEARCH_TIME}ms)`);
    console.log(`   ‚úÖ Success: ${resultado.success}`);
    
    if (resultado.success && resultado.ld) {
      console.log(`   üë§ LD encontrado: ${resultado.ld.Nombre}`);
      console.log(`   üÜî ID: ${resultado.ld.ID}`);
      console.log(`   üé≠ Rol: ${resultado.ld.Rol}`);
    }
    
    const exitoso = tiempo < TEST_SUITE_CONFIG.MAX_QUICK_SEARCH_TIME && resultado.success;
    console.log(`\nüìä RESULTADO: ${exitoso ? '‚úÖ B√öSQUEDA R√ÅPIDA FUNCIONANDO' : '‚ùå B√öSQUEDA LENTA O FALLIDA'}`);
    
    return { success: exitoso, tiempo: tiempo, resultado: resultado };
    
  } catch (error) {
    console.log('‚ùå [TEST] Error en b√∫squeda r√°pida:', error);
    return { success: false, error: error.toString() };
  }
}

// ==================== TESTS DE CARGA COMPLETA ====================

/**
 * Test de carga completa optimizada
 */
function testCargaCompleta() {
  console.log('üß™ [TEST] Iniciando test de carga completa...');
  
  try {
    // Limpiar cach√©
    clearCache();
    
    const startTime = Date.now();
    const directorio = cargarDirectorioCompleto(true); // forceReload = true
    const tiempo = Date.now() - startTime;
    
    console.log(`   ‚è±Ô∏è Tiempo total: ${tiempo}ms (${(tiempo/1000).toFixed(1)}s)`);
    console.log(`   üìä L√≠deres: ${directorio.lideres ? directorio.lideres.length : 0}`);
    console.log(`   üìä C√©lulas: ${directorio.celulas ? directorio.celulas.length : 0}`);
    console.log(`   üìä Ingresos: ${directorio.ingresos ? directorio.ingresos.length : 0}`);
    
    const exitoso = tiempo < TEST_SUITE_CONFIG.MAX_LOAD_TIME && 
                   directorio.lideres && directorio.lideres.length > 0;
    
    console.log(`\nüìä RESULTADO: ${exitoso ? '‚úÖ CARGA COMPLETA OPTIMIZADA' : '‚ùå CARGA A√öN LENTA'}`);
    
    return { 
      success: exitoso, 
      tiempo: tiempo, 
      datos: {
        lideres: directorio.lideres ? directorio.lideres.length : 0,
        celulas: directorio.celulas ? directorio.celulas.length : 0,
        ingresos: directorio.ingresos ? directorio.ingresos.length : 0
      }
    };
    
  } catch (error) {
    console.log('‚ùå [TEST] Error en carga completa:', error);
    return { success: false, error: error.toString() };
  }
}

// ==================== TESTS DE FUNCIONALIDAD ====================

/**
 * Test de getDatosLD optimizado
 */
function testGetDatosLDOptimizado() {
  console.log('üß™ [TEST] Iniciando test de getDatosLD optimizado...');
  
  try {
    // Limpiar cach√© espec√≠fica
    const cache = CacheService.getScriptCache();
    cache.remove(`LD_QUICK_${TEST_SUITE_CONFIG.TEST_LD_ID}`);
    cache.remove(`LD_BASIC_${TEST_SUITE_CONFIG.TEST_LD_ID}`);
    
    // Test modo b√°sico (debe usar b√∫squeda r√°pida)
    console.log('   üîç Probando modo b√°sico...');
    const startTime1 = Date.now();
    const resultadoBasico = getDatosLD(TEST_SUITE_CONFIG.TEST_LD_ID, false);
    const tiempo1 = Date.now() - startTime1;
    
    console.log(`   ‚è±Ô∏è Modo b√°sico: ${tiempo1}ms`);
    console.log(`   ‚úÖ Success: ${resultadoBasico.success}`);
    
    // Test modo completo (m√©todo tradicional)
    console.log('   üîç Probando modo completo...');
    const startTime2 = Date.now();
    const resultadoCompleto = getDatosLD(TEST_SUITE_CONFIG.TEST_LD_ID, true);
    const tiempo2 = Date.now() - startTime2;
    
    console.log(`   ‚è±Ô∏è Modo completo: ${tiempo2}ms`);
    console.log(`   ‚úÖ Success: ${resultadoCompleto.success}`);
    
    const exitoso = resultadoBasico.success && resultadoCompleto.success;
    console.log(`\nüìä RESULTADO: ${exitoso ? '‚úÖ getDatosLD OPTIMIZADO FUNCIONANDO' : '‚ùå PROBLEMA CON getDatosLD'}`);
    
    return { 
      success: exitoso, 
      basico: { tiempo: tiempo1, resultado: resultadoBasico },
      completo: { tiempo: tiempo2, resultado: resultadoCompleto }
    };
    
  } catch (error) {
    console.log('‚ùå [TEST] Error en getDatosLD optimizado:', error);
    return { success: false, error: error.toString() };
  }
}

// ==================== TESTS INTEGRADOS ====================

/**
 * Test completo del sistema optimizado
 */
function testSistemaCompleto() {
  console.log('üöÄ ===========================================');
  console.log('üß™ TEST COMPLETO DEL SISTEMA OPTIMIZADO');
  console.log('üöÄ ===========================================');
  
  const resultados = {
    configuracion: null,
    funcionesOptimizadas: null,
    cacheFragmentado: null,
    busquedaRapida: null,
    cargaCompleta: null,
    getDatosLD: null
  };
  
  try {
    // Test 1: Configuraci√≥n
    console.log('\n1Ô∏è‚É£ TEST DE CONFIGURACI√ìN');
    resultados.configuracion = testConfiguracion();
    
    // Test 2: Funciones optimizadas
    console.log('\n2Ô∏è‚É£ TEST DE FUNCIONES OPTIMIZADAS');
    resultados.funcionesOptimizadas = testFuncionesOptimizadas();
    
    // Test 3: Cach√© fragmentado
    console.log('\n3Ô∏è‚É£ TEST DE CACH√â FRAGMENTADO');
    resultados.cacheFragmentado = testCacheFragmentado();
    
    // Test 4: B√∫squeda r√°pida
    console.log('\n4Ô∏è‚É£ TEST DE B√öSQUEDA R√ÅPIDA');
    resultados.busquedaRapida = testBusquedaRapida();
    
    // Test 5: Carga completa
    console.log('\n5Ô∏è‚É£ TEST DE CARGA COMPLETA');
    resultados.cargaCompleta = testCargaCompleta();
    
    // Test 6: getDatosLD optimizado
    console.log('\n6Ô∏è‚É£ TEST DE getDatosLD OPTIMIZADO');
    resultados.getDatosLD = testGetDatosLDOptimizado();
    
    // Resumen final
    const testsExitosos = Object.values(resultados).filter(r => r && r.success).length;
    const totalTests = Object.keys(resultados).length;
    
    console.log('\nüéØ ===========================================');
    console.log('üìä RESUMEN FINAL DEL TEST COMPLETO');
    console.log('üéØ ===========================================');
    console.log(`‚úÖ Tests exitosos: ${testsExitosos}/${totalTests}`);
    
    // Detalle de resultados
    Object.entries(resultados).forEach(([test, resultado], index) => {
      if (resultado) {
        const status = resultado.success ? '‚úÖ' : '‚ùå';
        console.log(`${index + 1}Ô∏è‚É£ ${test}: ${status} ${resultado.success ? 'EXITOSO' : 'FALL√ì'}`);
      }
    });
    
    const sistemaExitoso = testsExitosos === totalTests;
    console.log(`\nüéâ SISTEMA: ${sistemaExitoso ? '‚úÖ COMPLETAMENTE OPTIMIZADO' : '‚ö†Ô∏è PARCIALMENTE OPTIMIZADO'}`);
    
    return {
      success: sistemaExitoso,
      testsExitosos: testsExitosos,
      totalTests: totalTests,
      resultados: resultados
    };
    
  } catch (error) {
    console.error('‚ùå ERROR CR√çTICO EN TEST COMPLETO:', error);
    return {
      success: false,
      error: error.toString(),
      resultados: resultados
    };
  }
}

// ==================== FUNCIONES DE UTILIDAD ====================

/**
 * Ejecuta todos los tests de forma r√°pida
 */
function ejecutarTodosLosTests() {
  console.log('üöÄ Ejecutando todos los tests...');
  return testSistemaCompleto();
}

/**
 * Ejecuta solo tests de rendimiento
 */
function ejecutarTestsRendimiento() {
  console.log('‚ö° Ejecutando tests de rendimiento...');
  
  const resultados = {
    funcionesOptimizadas: testFuncionesOptimizadas(),
    busquedaRapida: testBusquedaRapida(),
    cargaCompleta: testCargaCompleta()
  };
  
  const exitosos = Object.values(resultados).filter(r => r.success).length;
  const total = Object.keys(resultados).length;
  
  console.log(`\nüìä Tests de rendimiento: ${exitosos}/${total} exitosos`);
  return { success: exitosos === total, resultados: resultados };
}

console.log('üß™ TestSuiteUnificado cargado - Ejecuta ejecutarTodosLosTests() o testSistemaCompleto()');
